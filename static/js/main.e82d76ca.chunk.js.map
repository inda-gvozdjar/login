{"version":3,"sources":["login.svg","config/Fire.jsx","components/login/login.jsx","components/navbar/navbar.jsx","components/home.jsx","components/login/loginapp.jsx","providers/UserProvider.jsx","components/login/forgotPass.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","Login","props","handleChange","e","setState","target","name","value","login","preventDefault","signInWithEmailAndPassword","state","email","password","catch","error","fireErrors","message","register","createUserWithEmailAndPassword","getAction","action","formTitle","loginBtn","errorNottification","this","className","submitBtn","type","onClick","login_register","forgot_pass","src","loginImg","id","onChange","placeholder","to","React","Component","Navbar","logout","signOut","Home","Loginapp","user","authListener","onAuthStateChanged","UserContext","createContext","UserProvider","componentDidMount","userAuth","Provider","children","ForgotPass","useState","setEmail","emailHasBeenSent","setEmailHasBeenSent","setError","event","currentTarget","sendPasswordResetEmail","then","setTimeout","sendResetEmail","App","path","render","component","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,mC,6NCkBrCC,G,kBAAOC,IAASC,cAZP,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,kBAKNC,EAAOV,IAASU,OACJV,IAASW,YAElCX,IAASW,Y,qCC6EMC,E,kDA5FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,aAAe,SAAAC,GACX,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAb3B,EAgBnBC,MAAQ,SAAAL,GACJA,EAAEM,iBACFtB,EAAKW,OAAOY,2BAA2B,EAAKC,MAAMC,MAAO,EAAKD,MAAME,UAC/DC,OAAM,SAACC,GACJ,EAAKX,SAAS,CAAEY,WAAYD,EAAME,cApB3B,EAwBnBC,SAAW,SAAAf,GACPA,EAAEM,iBACFtB,EAAKW,OAAOqB,+BAA+B,EAAKR,MAAMC,MAAO,EAAKD,MAAME,UACnEC,OAAM,SAACC,GACJ,EAAKX,SAAS,CAAEY,WAAYD,EAAME,cA5B3B,EAgCnBG,UAAY,SAAAC,GACO,QAAXA,EACA,EAAKjB,SAAS,CAAEkB,UAAW,oBAAqBC,UAAU,EAAOP,WAAY,KAE7E,EAAKZ,SAAS,CAAEkB,UAAW,QAASC,UAAU,EAAMP,WAAY,MAlCpE,EAAKL,MAAQ,CACTC,MAAO,GACPC,SAAU,GACVG,WAAY,GACZM,UAAW,QACXC,UAAU,GAPC,E,qDAwCT,IAAD,OAEDC,EAAqBC,KAAKd,MAAMK,WAAc,yBAAKU,UAAU,SAASD,KAAKd,MAAMK,YAAqB,KAGtGW,EAAYF,KAAKd,MAAMY,SACtB,2BAAOG,UAAU,WAAWE,KAAK,SAASC,QAASJ,KAAKjB,MAAOD,MAAM,YACrE,2BAAOmB,UAAU,WAAWE,KAAK,SAASC,QAASJ,KAAKP,SAAUX,MAAM,YAEzEuB,EAAiBL,KAAKd,MAAMY,SAC3B,4BAAQG,UAAU,MAAMG,QAAS,kBAAM,EAAKT,UAAU,SAAtD,gCACA,4BAAQM,UAAU,MAAMG,QAAS,kBAAM,EAAKT,UAAU,WAAtD,iCAEDW,EAAcN,KAAKd,MAAMY,SAAY,4BAAQG,UAAU,cAAlB,oBAA4D,KAErG,OACI,yBAAKA,UAAU,aACX,yBAAKA,UAAU,SACX,yBAAKM,IAAKC,OAEd,yBAAKC,GAAG,SAAST,KAAKd,MAAMW,WAC5B,yBAAKI,UAAU,QACVF,EACD,8BACI,2BAAOI,KAAK,OACRM,GAAG,WACH3B,MAAOkB,KAAKd,MAAMC,MAClBuB,SAAUV,KAAKvB,aACfI,KAAK,QACL8B,YAAY,WAChB,2BAAOR,KAAK,WACRM,GAAG,WACH3B,MAAOkB,KAAKd,MAAME,SAClBsB,SAAUV,KAAKvB,aACfI,KAAK,WACL8B,YAAY,cAEpB,yBAAKF,GAAG,SACHP,EACD,kBAAC,IAAD,CAAMU,GAAG,mBACJN,IAGT,yBAAKL,UAAU,kBACVI,S,GArFLQ,IAAMC,WCwBXC,G,kNArBXC,OAAS,WACLtD,EAAKW,OAAO4C,W,uDAIZ,OACI,yBAAKhB,UAAU,OACX,4BAEI,kBAAC,IAAD,CAAMW,GAAG,UACL,4BAAQX,UAAU,aAAaG,QAASJ,KAAKgB,QAA7C,iB,GAbHF,cCgBNI,E,uKAVP,OACI,yBAAKjB,UAAU,UACX,kBAAC,IAAD,KACI,kBAAC,EAAD,Y,GAPDY,IAAMC,WCiCVK,E,kDAjCX,aAAe,IAAD,8BACV,gBACKjC,MAAQ,CACTkC,KAAM,MAHA,E,gEAQVpB,KAAKqB,iB,qCAGO,IAAD,OACX3D,EAAKW,OAAOiD,oBAAmB,SAACF,GACxBA,EACA,EAAKzC,SAAS,CAAEyC,SAEhB,EAAKzC,SAAS,CAAEyC,KAAM,Y,+BAO9B,OACI,yBAAKnB,UAAU,cACVD,KAAKd,MAAMkC,KAAQ,kBAAC,EAAD,MAAa,kBAAC,EAAD,W,GA1B1BP,IAAMC,WCJhBS,EAAcC,wBAAc,CAAEJ,KAAM,OAmBlCK,E,4MAjBXvC,MAAQ,CACJkC,KAAM,M,EAGVM,kBAAoB,WAChBrD,EAAKiD,oBAAmB,SAAAK,GACpB,EAAKhD,SAAS,CAAEyC,KAAMO,Q,uDAI1B,OACI,kBAACJ,EAAYK,SAAb,CAAsB9C,MAAOkB,KAAKd,MAAMkC,MACnCpB,KAAKxB,MAAMqD,c,GAbDf,a,eC6DZgB,EA5DI,WAAO,IAAD,EACKC,mBAAS,IADd,mBACd5C,EADc,KACP6C,EADO,OAE2BD,oBAAS,GAFpC,mBAEdE,EAFc,KAEIC,EAFJ,OAGKH,mBAAS,MAHd,mBAGdzC,EAHc,KAGP6C,EAHO,KAsBrB,OACI,yBAAKlC,UAAU,oBACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,iBAAd,yBACA,6BACI,0BAAML,OAAO,GAAGK,UAAU,cACrBgC,GACG,+DAIO,OAAV3C,GACG,yBAAKW,UAAU,SACVX,GAIT,2BACIa,KAAK,QACLtB,KAAK,YACL4B,GAAG,YACH3B,MAAOK,EACPwB,YAAY,mBACZD,SAzCA,SAAA0B,GAAU,IAAD,EACLA,EAAMC,cAAtBxD,EADqB,EACrBA,KAAMC,EADe,EACfA,MACD,cAATD,GACAmD,EAASlD,IAuCOmB,UAAU,gBAEd,4BAAQA,UAAU,YAAYG,QAAS,SAAAgC,IAtCpC,SAAAA,GACnBA,EAAMpD,iBACNX,EACKiE,uBAAuBnD,GACvBoD,MAAK,WACFL,GAAoB,GACpBM,YAAW,WAAQN,GAAoB,KAAU,QAEpD7C,OAAM,WACH8C,EAAS,+BA8BGM,CAAeL,KADnB,0BAKJ,kBAAC,IAAD,CAAMxB,GAAG,UACL,4DADJ,SC1BL8B,E,uKAnBX,OACE,yBAAKzC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAO0C,KAAK,IAAIC,OAAQ,kBACtB,kBAAC,IAAD,CAAUhC,GAAG,cAEf,kBAAC,IAAD,CAAO+B,KAAK,SAASE,UAAW1B,IAChC,kBAAC,IAAD,CAAOwB,KAAK,kBAAkBE,UAAWf,IACzC,kBAAC,IAAD,CAAOgB,OAAK,EAACH,KAAK,QAAQE,UAAW3B,Y,GAdjCJ,aCGEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAEP,kBAAC,EAAD,MAEAS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdtE,OAAM,SAAAC,GACLsE,QAAQtE,MAAMA,EAAME,c","file":"static/js/main.e82d76ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.3816d835.svg\";","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport Axios from 'axios'\n\n\nconst config = {\n    apiKey: \"AIzaSyCGSjPUyaSlaO6qJR2tNBGbGpKOeclZGSY\",\n    authDomain: \"portfolio-29a89.firebaseapp.com\",\n    databaseURL: \"https://portfolio-29a89.firebaseio.com\",\n    projectId: \"portfolio-29a89\",\n    storageBucket: \"portfolio-29a89.appspot.com\",\n    messagingSenderId: \"48784013035\",\n    appId: \"1:48784013035:web:7033fe1aaca522bb04b0ae\",\n    measurementId: \"G-9M9DEGBKKV\"\n\n};\n\nconst fire = firebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nfirebase.firestore();\n\nexport { fire, Axios }\n\n\n\n","import React from \"react\";\nimport { fire } from '../../config/Fire'\nimport './style.scss'\nimport loginImg from \"../../login.svg\";\nimport { Link } from 'react-router-dom';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            fireErrors: \"\",\n            formTitle: \"Login\",\n            loginBtn: true\n        };\n    }\n\n\n    handleChange = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    login = e => {\n        e.preventDefault();\n        fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\n            .catch((error) => {\n                this.setState({ fireErrors: error.message })\n            });\n    }\n\n    register = e => {\n        e.preventDefault();\n        fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\n            .catch((error) => {\n                this.setState({ fireErrors: error.message })\n            });\n    }\n\n    getAction = action => {\n        if (action === \"reg\") {\n            this.setState({ formTitle: \"Register New User\", loginBtn: false, fireErrors: \"\" })\n        } else {\n            this.setState({ formTitle: \"Login\", loginBtn: true, fireErrors: \"\" })\n        }\n    }\n\n    render() {\n\n        let errorNottification = this.state.fireErrors ? (<div className=\"Error\">{this.state.fireErrors}</div>) : null\n\n\n        let submitBtn = this.state.loginBtn ?\n            (<input className=\"loginBtn\" type=\"submit\" onClick={this.login} value=\"Sign in\" />) :\n            (<input className=\"loginBtn\" type=\"submit\" onClick={this.register} value=\"Sign up\" />)\n\n        let login_register = this.state.loginBtn ?\n            (<button className=\"btn\" onClick={() => this.getAction('reg')}>Not have an account? Sign up</button>) :\n            (<button className=\"btn\" onClick={() => this.getAction('login')}>Already have account? Sign in</button>)\n\n        let forgot_pass = this.state.loginBtn ? (<button className=\"forgotPass\">Forgot password?</button>) : null\n\n        return (\n            <div className=\"container\">\n                <div className=\"image\">\n                    <img src={loginImg} />\n                </div>\n                <div id=\"title\">{this.state.formTitle}</div>\n                <div className=\"body\">\n                    {errorNottification}\n                    <form>\n                        <input type=\"text\"\n                            id=\"username\"\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                            name=\"email\"\n                            placeholder=\"E-mail\" />\n                        <input type=\"password\"\n                            id=\"password\"\n                            value={this.state.password}\n                            onChange={this.handleChange}\n                            name=\"password\"\n                            placeholder=\"Password\" />\n                    </form>\n                    <div id=\"lower\">\n                        {submitBtn}\n                        <Link to=\"/forgotpassword\">\n                            {forgot_pass}\n                        </Link>\n                    </div>\n                    <div className=\"login-register\">\n                        {login_register}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login","import React, { Component } from 'react';\nimport './style.scss';\nimport { fire } from '../../config/Fire';\nimport { Link } from 'react-router-dom';\n\n\nclass Navbar extends Component {\n\n\n    logout = () => {\n        fire.auth().signOut();\n    }\n\n    render() {\n        return (\n            <div className=\"nav\">\n                <ul>\n\n                    <Link to=\"/login\">\n                        <button className=\"logout-btn\" onClick={this.logout}>Logout</button>\n                    </Link>\n\n                </ul>\n            </div >\n\n        )\n    }\n}\n\n\nexport default Navbar;\n","import React from 'react'\nimport Navbar from './navbar/navbar'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './navbar/style.scss'\n\n\n\n\nclass Home extends React.Component {\n\n\n    render() {\n        return (\n            <div className=\"navbar\">\n                <Router>\n                    <Navbar />\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React from \"react\";\nimport \"./style.scss\";\nimport { fire } from '../../config/Fire'\nimport Login from \"./login\";\nimport Home from '../home';\n\n\nclass Loginapp extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            user: null\n        };\n    }\n\n    componentDidMount() {\n        this.authListener();\n    }\n\n    authListener() {\n        fire.auth().onAuthStateChanged((user) => {\n            if (user) {\n                this.setState({ user });\n            } else {\n                this.setState({ user: null })\n            }\n        });\n\n    }\n    render() {\n\n        return (\n            <div className=\"login-body\">\n                {this.state.user ? (<Home />) : (<Login />)}\n            </div>\n        );\n    }\n}\n\n\n\nexport default Loginapp;","import React, { Component, createContext } from \"react\";\nimport { auth } from \"../config/Fire\";\n\nexport const UserContext = createContext({ user: null });\nclass UserProvider extends Component {\n    state = {\n        user: null\n    };\n\n    componentDidMount = () => {\n        auth.onAuthStateChanged(userAuth => {\n            this.setState({ user: userAuth });\n        });\n    };\n    render() {\n        return (\n            <UserContext.Provider value={this.state.user}>\n                {this.props.children}\n            </UserContext.Provider>\n        );\n    }\n}\nexport default UserProvider;","import React, { useState } from \"react\";\nimport \"./style.scss\";\nimport { Link } from \"react-router-dom\";\nimport { auth } from \"../../config/Fire\";\n\nconst ForgotPass = () => {\n    const [email, setEmail] = useState(\"\");\n    const [emailHasBeenSent, setEmailHasBeenSent] = useState(false);\n    const [error, setError] = useState(null);\n    const onChangeHandler = event => {\n        const { name, value } = event.currentTarget;\n        if (name === \"userEmail\") {\n            setEmail(value);\n        }\n    };\n    const sendResetEmail = event => {\n        event.preventDefault();\n        auth\n            .sendPasswordResetEmail(email)\n            .then(() => {\n                setEmailHasBeenSent(true);\n                setTimeout(() => { setEmailHasBeenSent(false) }, 3000);\n            })\n            .catch(() => {\n                setError(\"Error resetting password\");\n            });\n    };\n    return (\n        <div className=\"resset-container\">\n            <div className=\"resset-position\">\n                <h1 className=\"resset-tittle\"> Reset your Password </h1>\n                <div>\n                    <form action=\"\" className=\"reset-form\">\n                        {emailHasBeenSent && (\n                            <div>\n                                An email has been sent to you!\n                            </div>\n                        )}\n                        {error !== null && (\n                            <div className=\"Error\">\n                                {error}\n                            </div>\n                        )}\n\n                        <input\n                            type=\"email\"\n                            name=\"userEmail\"\n                            id=\"userEmail\"\n                            value={email}\n                            placeholder=\"Input your email\"\n                            onChange={onChangeHandler}\n                            className=\"email-input\"\n                        />\n                        <button className=\"ressetBtn\" onClick={event => {\n                            sendResetEmail(event);\n                        }}\n                        >Send me a reset link </button>\n                    </form>\n                    <Link to=\"/login\">\n                        <h5> &larr; back to sign in page</h5> </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default ForgotPass;","import React, { Component } from 'react';\nimport './App.scss';\nimport Loginapp from './components/login/loginapp';\nimport UserProvider from \"./providers/UserProvider\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport ForgotPass from './components/login/forgotPass'\nimport Home from './components/home'\n\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <UserProvider>\n              <Route path=\"/\" render={() => (\n                <Redirect to=\"/login\" />\n              )} />\n              <Route path=\"/login\" component={Loginapp} />\n              <Route path=\"/forgotpassword\" component={ForgotPass} />\n              <Route exact path=\"/home\" component={Home} />\n            </UserProvider>\n          </Switch>\n        </Router>\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}